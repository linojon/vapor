aid,title,summary,authorid,pubdate,pubtypeid,notes,status,body,author,counter,cids,categories,keywords
212,"Replaceable render engines for Formtastic","One of the things I love about Formtastic is the semantic DSL for specifying a form in my code. One of the things that can frustrate me is the resulting DOM that is generated.",3,1268801851,9,,2,"<p>I recently <a href=""http://github.com/linoj/formtastic/tree/render"">forked the Formtastic project</a>  and took a shot at extracting the render   code from the semantic DSL. Worked on it some more over the weekend at  <a href=""http://railscamps.com/"">RailsCampNE</a>.  </p><p>While you can often use CSS to work through the DOM structure and get the form to look how you want, it&#39;s not always the way I would have done it, and there are cases that just aren&#39;t possible. So I decided to refactor Formtastic. At first I looked at just subclassing the builder but decided to fork the project. I made some decisions where to draw the line between DSL and &quot;render&quot;, and split the rendering into a separate module. <br /></p><p>Anyway, please have a look:  http://github.com/linoj/formtastic/blob/render/RENDERER.textile<br />and let me have any comments or suggestions. <br /></p><h2>Example</h2><p>A frequent question on the Formtastic google group is <a href=""http://groups.google.com/group/formtastic/browse_thread/thread/e43d1130f47b12fe"">something like</a>  &quot;how do i show two or more fields inline&quot;.</p><p>When Formtastic renders fields, say a first, middle, and last name input string in a view like this:<br /></p><pre>&lt;%= form.input :first_name, :label =&gt; &#39;First&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;<br />&lt;%= form.input :middle_name, :label =&gt; &#39;Middle&#39;, :input_html =&gt; {:size =&gt; &#39;5&#39;} %&gt;<br />&lt;%= form.input :last_name, :label =&gt; &#39;Last&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;</pre><br /><p> you get something like this:</p><pre>&lt;li id=&quot;user_first_name_input&quot; class=&quot;string required&quot;&gt;<br />  &lt;label for=&quot;user_first_name&quot;&gt;First&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />  &lt;input id=&quot;user_first_name&quot; name=&quot;user[first_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;<br />&lt;/li&gt;<br />&lt;li id=&quot;user_middle_name_input&quot; class=&quot;string required&quot;&gt;<br />  &lt;label for=&quot;user_middle_name&quot;&gt;Middle&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />  &lt;input id=&quot;user_middle_name&quot; name=&quot;user[middle_name]&quot; size=&quot;5&quot; type=&quot;text&quot;&gt;<br />&lt;/li&gt;<br />&lt;li id=&quot;user_last_name_input&quot; class=&quot;string required&quot;&gt;<br />  &lt;label for=&quot;user_last_name&quot;&gt;Last&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />  &lt;input id=&quot;user_last_name&quot; name=&quot;user[last_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;<br />&lt;/li&gt;<br /></pre><p>&nbsp;</p><p>As you&#39;d expect, your styles are setup so each &lt;li&gt; displays each form field on separate lines. <br /></p><p>If you want to group these fields, you can use input.fields to create a fieldset like so,</p><pre>&lt;% form.inputs &#39;Full Name&#39; do %&gt;<br />  &lt;%= form.input :first_name, :label =&gt; &#39;First&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;<br />  &lt;%= form.input :middle_name, :label =&gt; &#39;Middle&#39;, :input_html =&gt; {:size =&gt; &#39;5&#39;} %&gt; <br />  &lt;%= form.input :last_name, :label =&gt; &#39;Last&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;<br />&lt;% end %&gt;<br /></pre><p>which generates,</p><pre>&lt;fieldset class=&quot;inputs&quot;&gt;<br />  &lt;legend&gt;&lt;span&gt;Full Name&lt;/span&gt;&lt;/legend&gt;<br />  &lt;ol&gt;<br />    &lt;li id=&quot;user_first_name_input&quot; class=&quot;string required&quot;<br />      &lt;label for=&quot;user_first_name&quot;&gt;First&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />      &lt;input id=&quot;user_first_name&quot; name=&quot;user[first_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;<br />    &lt;/li&gt;<br />    &lt;li id=&quot;user_middle_name_input&quot; class=&quot;string required&quot;&gt;<br />      &lt;label for=&quot;user_middle_name&quot;&gt;Middle&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />      &lt;input id=&quot;user_middle_name&quot; name=&quot;user[middle_name]&quot; size=&quot;5&quot; type=&quot;text&quot;&gt;<br />    &lt;/li&gt;<br />    &lt;li id=&quot;user_last_name_input&quot; class=&quot;string required&quot;&gt;<br />      &lt;label for=&quot;user_last_name&quot;&gt;Last&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt; <br />      &lt;input id=&quot;user_last_name&quot; name=&quot;user[last_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;<br />    &lt;/li&gt;<br />  &lt;/ol&gt;<br />&lt;/fieldset&gt;</pre><p>The fields are enclosed in a fieldset. </p><p>To then force these onto the same line, you&#39;d float the input items so they&#39;re inline rather than on separate lines. And then adjust the CSS so the fieldset and legend don&#39;t really look like a fieldset and legend. If you&#39;ve ever tried this, you know it&#39;s usually a lot of uninvited work. </p><h3>Use a Formtastic ERB Renderer</h3><p>Using my Formtastic ERB renderer this is a bit easier and more intuitive.</p><p>First, install <a href=""http://github.com/linoj/formtastic/tree/render"">my fork of Formtastic</a> . Then configure the initializer to use the ERB renderer. </p><p>File: config/initializers/formtastic.rb</p><pre>Formtastic::SemanticFormBuilder.renderer = Formtastic::ErbRenderer</pre><p>Now we can specify alternative partial templates for the inputs, such as</p><pre>&lt;% form.inputs :partial =&gt; &#39;inline_items&#39; do %&gt;<br />  &lt;%= form.input :first_name, :partial =&gt; &#39;inline&#39;, :label =&gt; &#39;First&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;<br />  &lt;%= form.input :middle_name, :partial =&gt; &#39;inline&#39;, :label =&gt; &#39;Middle&#39;, :input_html =&gt; {:size =&gt; &#39;5&#39;} %&gt;<br />  &lt;%= form.input :last_name, :partial =&gt; &#39;inline&#39;, :label =&gt; &#39;Last&#39;, :input_html =&gt; {:size =&gt; &#39;15&#39;} %&gt;<br />&lt;% end %&gt;<br /></pre><p>What we&#39;ve done is specified the inputs should use partial &quot;inline_items&quot; and the input use partial &quot;inline&quot;. These might be defined as follows:  </p><p>File: app/views/formtastic/_inline_items.html.erb</p><pre>&lt;li class=&quot;&lt;%= wrapper[:class] %&gt;&quot; &gt;<br />  &lt;label&gt;&lt;%= legend -%&gt;&lt;/label&gt;<br />  &lt;div&gt;&lt;%= contents %&gt;&lt;/div&gt;<br />&lt;/li&gt; <br /></pre><p>File: app/views/formtastic/_inline.html.erb</p><pre>&lt;p  id=&quot;&lt;%= wrapper[:id] %&gt;&quot; class=&quot;&lt;%= wrapper[:class] %&gt;&quot; &gt;<br />  &lt;%= label -%&gt;&lt;br /&gt;<br />  &lt;%= input -%&gt;&lt;br /&gt;<br />  &lt;%= inline_errors -%&gt;<br />&lt;/p&gt;</pre><p>So now when we render the form, we get</p><pre>&lt;li class=&quot;inputs&quot;&gt;<br />  &lt;label&gt;Full Name&lt;/label&gt;<br />  &lt;div&gt;<br />    &lt;p id=&quot;user_first_name_input&quot; class=&quot;string required&quot;&gt;<br />      &lt;label for=&quot;user_first_name&quot;&gt;First&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt;&lt;br&gt;<br />      &lt;input id=&quot;user_first_name&quot; name=&quot;user[first_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br />    &lt;/p&gt;<br />    &lt;p id=&quot;user_middle_name_input&quot; class=&quot;string required&quot;&gt;<br />      &lt;label for=&quot;user_middle_name&quot;&gt;Middle&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt;&lt;br&gt;<br />      &lt;input id=&quot;user_middle_name&quot; name=&quot;user[middle_name]&quot; size=&quot;5&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br />    &lt;/p&gt;<br />    &lt;p id=&quot;user_last_name_input&quot; class=&quot;string required&quot;&gt;<br />      &lt;label for=&quot;user_last_name&quot;&gt;Last&lt;abbr title=&quot;required&quot;&gt;*&lt;/abbr&gt;&lt;/label&gt;&lt;br&gt;<br />      &lt;input id=&quot;user_last_name&quot; name=&quot;user[last_name]&quot; size=&quot;15&quot; type=&quot;text&quot;&gt;&lt;br&gt;<br />    &lt;/p&gt;<br />  &lt;/div&gt;<br />&lt;/li&gt;</pre><br /><p> so the inputs group is wrapped in a &lt;div&gt; and the items are in &lt;p&gt; tags. That looks palatable.</p><p>The CSS to make this inline may look like:</p><pre>form.formtastic li.inputs div {</pre><pre>  margin-left: 25%;<br />}<br /></pre><pre>  </pre><pre>form.formtastic li.inputs div label {</pre><pre>  display: inline;</pre><pre>  float: none;</pre><pre>}<br />      </pre><pre>form.formtastic li.inputs div p {</pre><pre>  float: left;</pre><pre>  margin-left: 0;</pre><pre>  margin-right: 1em;<br />}<br /></pre><p>Of course, this is just one example. In another case I need my form fields to be in arranged in a table. And so on. The point is we&#39;re no longer constrained by the hard-coded DOM structure generated by Formtastic.</p><p><img style=""width: 612px; height: 82px"" src=""var/uploads/Image/fields.jpg"" alt="" "" width=""612"" height=""82"" /> <br /></p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p><p>&nbsp;</p>",linoj,1425,42,rails,
211,"Upgrading app from Rails 2.3.2 to 2.3.5","I ran into a few snags upgrading ReviewRamp from Rails 2.3.2 to 2.3.5",3,1263329438,9,,2,"<h3>First Fail <br /></h3><p>Actually, we went to do this back on Dec 6 and ran into errors installing the Rails GEMs. I kept getting messages like </p><pre>...<br />Installing gem activerecord-2.3.5<br />Downloading gem activerecord-2.3.5.gem<br />GET 302 Found: http://gems.rubyforge.org/gems/activerecord-2.3.5.gem<br />Exception `EOFError&#39; at /opt/local/lib/ruby/1.8/net/protocol.rb:135 - end of file reached<br />GET 200 OK: http://s3.amazonaws.com/gemcutter_production/gems/activerecord-2.3.5.gem<br />Exception `Gem::Package::FormatError&#39; at /opt/local/lib/ruby/site_ruby/1.8/rubygems/package/tar_input.rb:110 - No metadata found!<br />Exception `Gem::InstallError&#39; at /opt/local/lib/ruby/site_ruby/1.8/rubygems/installer.rb:121 - invalid gem format for /opt/local/lib/ruby/gems/1.8/cache/activerecord-2.3.5.gem<br />ERROR:  Error installing rails:<br />    invalid gem format for /opt/local/lib/ruby/gems/1.8/cache/activerecord-2.3.5.gem<br />Nothing to update<br /></pre><p>&nbsp;</p><p>Googling revealed other people were running into similar issues. I tried a bunch of things, including removing the cache directory /opt/local/lib/ruby/gems/1.8/cache/activerecord-2.3.5.gem to no avail. After wasting an evening on this, I gave up and moved on to other work.</p><h3>Update Gems <br /></h3><p>Last night I decided to revisit, and try again, and the activerecord (and other Rails gems) updates went perfectly fine! Yaaah, no problems. </p><pre>$ sudo gem update rails</pre><p>Then edit the config/environment.rb (changing 2.3.2 to 2.3.5)<br /></p><pre>RAILS_GEM_VERSION = &#39;2.3.5&#39; unless defined? RAILS_GEM_VERSION</pre><p> Next I tried rake gems and got an error with the rack gem, saying </p><pre> RubyGem version error: rack(1.0.0 not ~&gt; 1.0.1) <br /></pre><p>so I tried</p><pre> $ sudo gem update rack</pre><p> That actually installed version 1.1.0, and rails still wouldn&#39;t run. After some googling and fiddling around I realized it really does require 1.0.1, so did this:</p><pre> sudo gem install rack -v=1.0.1</pre><p> Hmm, so while I was at it I decided to upgrade everything. </p><p>Ooops, some of the gems required XCode. I replaced my Mac&#39;s hard drive a number of months ago and hadnt installed the XCode stuff, so fishing out the Leopard CD&#39;s, poped in the install disk, and found the Xcode folder and installed it.</p><p>Then,</p><pre> sudo gem update</pre><p>It had been a while since I upgraded Cucumber and Rspec, so these needed some additional love. First, the new cucumber-rails and database_cleaner gems,<br /></p><pre>sudo gem install cucumber-rails</pre><pre>sudo gem install database_cleaner <br /></pre><p>Then, I made copies of config/environments/cucumber.rb and features/support/env.rb and ran</p><pre>script/generate cucumber </pre><p>And then merged my custom changes the those files back into the generated ones.</p><p>Similarly for rspec, I made copy of spec/spec_helper.rb, ran</p><pre>script/generate rspec</pre><p>and merged back my changes. <br /></p><h3>Run Tests</h3><p>Next I run through my test suites. </p><pre>rake spec</pre><p>Woot! ran fine. With a few exceptions. Mostly legitimate things that hadn&#39;t errored out before, some in my code, others in the test code itself. Fixed&#39;em. <br /></p><p>&nbsp;</p><pre>cucumber</pre><p>Oops. More problems. Mostly related to a patch I&#39;d made to webrat early last year so &quot;within&quot; can support xpath not just css selectors. I thought that had been fixed and would be in my upgrade, but no. And the patch to the current webrat is different from what we figured out last March. See https://webrat.lighthouseapp.com/projects/10503/tickets/153-within-should-support-xpath Thanks tomtt :)</p><p>The easiest way it to add the following code to into features/support </p><pre>module Webrat</pre><pre>  class Scope</pre><pre>    protected</pre><pre>    def xpath_scoped_dom</pre><pre>      @scope.dom.xpath(@selector).first</pre><pre>    end</pre><pre>    def scoped_dom</pre><pre>      begin</pre><pre>        @scope.dom.css(@selector).first</pre><pre>      rescue Nokogiri::CSS::SyntaxError, Nokogiri::XML::XPath::SyntaxError =&gt; e</pre><pre>        begin</pre><pre>          # That was not a css selector, mayby it&#39;s an xpath selector?</pre><pre>          xpath_scoped_dom</pre><pre>        rescue</pre><pre>          # Raise original css syntax error if selector is not xpath either</pre><pre>          raise</pre><pre>        end</pre><pre>      end</pre><pre>    end</pre><pre><br />  end</pre><pre>end</pre><p> A couple of other tweeks were needed (like click_button doesnt find hidden buttons now; my app used onclick javascript to submit and had a hidden button for webrat to find ?!, I fixed it to correctly be unobtrusive-- starts out visible then js hides it when enabled.).</p><p>OK, all good. On the development version, that is.<br /></p><p>Now I just need to find a &quot;convenient&quot; midnight hour to upgrade the production server too.</p><p>&nbsp;</p><p>&nbsp;</p>",linoj,1571,42,rails,
